name: CI

on:
  pull_request:
  push:
    branches: [ master ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: --health-cmd="pg_isready" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Install packages
        run: sudo apt-get update && sudo apt-get install --no-install-recommends -y google-chrome-stable curl libjemalloc2 libvips postgresql-client

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.3.5
          bundler-cache: true

      - name: Install dependencies
        run: bundle install
        working-directory: backend

      - name: Wait for PostgreSQL to be ready
        run: |
          for i in {1..60}; do # Increased retries to 60
            pg_isready -h localhost -p 5432 && break
            echo "Waiting for PostgreSQL..."
            sleep 5 # Increased sleep duration to 5 seconds
          done
        env:
          PGPASSWORD: postgres

      - name: Debug PostgreSQL logs
        run: docker logs $(docker ps -q --filter "ancestor=postgres")

      - name: Verify PostgreSQL is running
        run: |
          for i in {1..10}; do
            psql -U postgres -c "SELECT 1;" && break
            echo "Retrying connection to PostgreSQL..."
            sleep 3
          done
        env:
          PGPASSWORD: postgres

      - name: Create PostgreSQL roles
        run: |
          set -e
          psql -U postgres -c "CREATE ROLE root WITH LOGIN SUPERUSER PASSWORD 'password';" || echo "Failed to create  'roleroot'"
          psql -U postgres -c "CREATE ROLE runner WITH LOGIN PASSWORD 'password';" || echo "Failed to create role 'runner'"
        env:
          PGPASSWORD: postgres

      - name: Copy database configuration
        run: cp config/database.github.yml config/database.yml
        working-directory: backend

      - name: Ensure scripts are executable
        run: chmod +x bin/rails
        working-directory: backend

      - name: Run tests
        env:
          RAILS_ENV: test
          DATABASE_URL: postgres://root:password@localhost:5432
        run: |
          bin/rails db:create
          bin/rails db:migrate
          bin/rails db:setup
          bin/rails test
        working-directory: backend

      - name: Keep screenshots from failed system tests
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: screenshots
          path: backend/tmp/screenshots
          if-no-files-found: ignore
